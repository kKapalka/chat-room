/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatroom.client;

import java.awt.CardLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ConnectException;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 *
 * @author kkapa
 */
public class ChatroomClient extends javax.swing.JFrame {
    int user_id;
    String login,pass;
    Socket server;
    BufferedReader reader;
    PrintWriter writer;
    static final String DELIMITER=";end;";
    /**
     * Creates new form ChatroomClient
     */
    public ChatroomClient() {
        
        initComponents();
        
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginPanel1 = new chatroom.client.LoginPanel();
        chatPanel2 = new chatroom.client.ChatPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());
        getContentPane().add(loginPanel1, "card2");
        getContentPane().add(chatPanel2, "card3");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void SwitchPanels(String state){
        CardLayout cards = (CardLayout)(getContentPane().getLayout());
        switch(state){
            case "Chat":
                cards.show(getContentPane(), "card3");
                break;
            case "Login":
                cards.show(getContentPane(), "card2");
        }
    }
    public void SendData(String data){
        String[] temp=data.split(DELIMITER);
        switch(temp[0]){
            case "Login":
                if(!Connect()) break;
                SwitchPanels("Chat");
                chatPanel2.setUserName(temp[1]);
                break;
            case "Logout":
                if(server.isConnected()){
                    writer.println(data);
                    writer.flush();
                }
                if(!Disconnect()) break;
                SwitchPanels("Login");
                break;
            case "Register":
                if(!Connect()) break;
                break;
            case "Disconnect":
                if(server.isConnected()){
                    writer.println(data);
                    writer.flush();
                }
                if(!Disconnect());
                break;
        }
        if(server.isConnected()){
            writer.println(data);
            writer.flush();
            Listen();
        }
                
    }
    public Boolean Connect(){
        try{
            server=new Socket("localhost",2222);
            InputStreamReader streamreader = new InputStreamReader(server.getInputStream());
            reader = new BufferedReader(streamreader);
            writer = new PrintWriter(server.getOutputStream());
            return true;
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
            "Serwer obecnie nieaktywny. Spróbuj później",
            "CONN_ERROR",
            JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    
    public Boolean Disconnect(){
        try{
            server.close();
            return true;
        }catch (Exception ex){
            JOptionPane.showMessageDialog(this,
            "Nie udało się rozłączyć",
            "DC_ERROR",
            JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    private void Listen(){
        Thread IncomingReader = new Thread(new IncomingReader(this));
        IncomingReader.start();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatroomClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatroomClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatroomClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatroomClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ChatroomClient client=new ChatroomClient();
                client.setVisible(true);
                client.addWindowListener(new WindowAdapter() {
                    public void windowClosing(WindowEvent evt) {
                    if(client.server.isConnected())client.SendData("Disconnect"+DELIMITER+client.login+DELIMITER);
            }
            });
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private chatroom.client.ChatPanel chatPanel2;
    private chatroom.client.LoginPanel loginPanel1;
    // End of variables declaration//GEN-END:variables
}
