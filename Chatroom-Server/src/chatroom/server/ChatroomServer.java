/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatroom.server;

import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * 
 * @author kkapa
 */
public class ChatroomServer extends javax.swing.JFrame {
    //database variables
    /**
     * Zmienna przechowujaca zapytania do bazy danych
     */
    Statement statement;
    /**
     * Zmienna przechowujaca odnosnik do polaczenia z baza danych
     */
    Connection conn;
    /**
     * URL do bazy danych przechowujacej informacje o czacie
     */
    String url = "jdbc:postgresql://localhost:5432/chatroom-db";
    /**
     * Stala przechowujaca znak stopu miedzy kolejnymi fragmentami przesylanej informacji
     */
    static final String DELIMITER=";end;";
    /**
     * Zmienna przechowujaca dane wlasciciela bazy danych, w celu pomyslnego zalogowania sie do niej
     */
    static final String LOGIN="postgres",PASS="poszlaoladoprzedszkola";
    /**
     * Zmienna przechowujaca liste strumieni wyjscia do klientow
     */
    ArrayList<User> users;
    /**
     * Klasa sluzaca wylacznie do przesylania e-maili
     */
    static MailSender sender=new MailSender();
    
    Table tab_users, messages, mutes;
    
    static final String MES_TAB="messages",MES_ID_COL="id",MES_COL="message",TIME_COL="sendtime",SEND_COL="username";
    //order: id, username, sendtime, message   
    /**
     * <p>Funkcja tworzy nowy formularz ChatroomServer, i wysrodkowuje go na ekranie</p>
     * <p>Laczy sie automatycznie z baza danych i uruchamia watek ServerStart zbierajacy
     * polaczenia od uzytkownikow, lub informuje administratora o bledzie polaczenia z baza.
     * Jesli polaczenie sie uda, guzik laczenia recznego sie zdezaktywuje.</p>
     */
    public ChatroomServer() {
        initComponents();
        setToMiddle();
        Launch(); 
    }

    private void setToMiddle(){
        setLocation((Toolkit.getDefaultToolkit().getScreenSize().width)/2 - getWidth()/2, (Toolkit.getDefaultToolkit().getScreenSize().height)/2 - getHeight()/2);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Launch = new javax.swing.JButton();
        ClientList = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ServerText = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chatroom Server");
        setMinimumSize(new java.awt.Dimension(385, 505));

        Launch.setText("Uruchom ręcznie");
        Launch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LaunchActionPerformed(evt);
            }
        });

        ClientList.setText("Lista klientów");
        ClientList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientListActionPerformed(evt);
            }
        });

        ServerText.setEditable(false);
        ServerText.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        ServerText.setText("...Serwer czeka na uruchomienie");
        jScrollPane1.setViewportView(ServerText);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Launch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                .addComponent(ClientList)
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClientList)
                    .addComponent(Launch))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void Launch(){
        try{
        DbConnect();
        Launch.setEnabled(false);
        }catch (SQLException ex){
            ServerText.setText("Nie polaczono z baza.\nSprobuj ponownie");
        }
            Thread starter = new Thread(new ServerStart(this));
            starter.start();
    }
    /**
     * <p>Sluzy do recznego polaczenia z baza danych oraz uruchomienia serwera,
     * jezeli automatyczne polaczenie sie nie uda - mechanizm fail-safe.</p>
     * <p>Jezeli polaczenie sie uda, guzik sie zdezaktywuje. Po polaczeniu z baza 
     * uruchamiany jest watek SerwerStart, zbierajacy polaczenia od uzytkownikow.</p>
     * @param evt nasluchuje nacisniecia guzika "Polacz manualnie"
     */
    private void LaunchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LaunchActionPerformed
        Launch();
    }//GEN-LAST:event_LaunchActionPerformed

    private void ClientListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientListActionPerformed
        String activeusers="";
        for(User temp: users){
            activeusers+=" "+temp.name;
        }
        ServerTextAppend("Aktywni klienci: "+activeusers);        // TODO add your handling code here:
    }//GEN-LAST:event_ClientListActionPerformed

    /**
     * @param args Nieuzywany
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatroomServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ChatroomServer().setVisible(true);
        });
    }

    /**
     * <p>Funkcja sluzy do laczenia z baza danych.</p><p>
     * Wykorzystuje zmienne zadeklarowane wewnatrz programu: <b>URL, login, haslo</b>
     * aby wykonac polaczenie. Gdy to sie uda, administrator jest o tym informowany.</p>
     * <p>Funkcja stosowana jest w dwoch miejscach: w konstruktorze (automatyczne
     * polaczenie) oraz wewnatrz funkcji LaunchActionPerformed (manualne polaczenie)</p>
     * @throws SQLException jezeli z jakiegokolwiek powodu polaczenie sie nie uda
     */
    
    private void DbConnect() throws SQLException{
        conn = DriverManager.getConnection(url,LOGIN,PASS);
        ServerText.setText("Polaczono z baza:\n"+url+"\n");
        InitializeDatabaseInfo();
    }
    
    private void InitializeDatabaseInfo() throws SQLException{
        ArrayList<Table> tables=GetAllTables();
        tables.forEach((temp) -> {
            try {
                GetAllColumns(temp);
            } catch (SQLException ex) {
                Logger.getLogger(ChatroomServer.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(null != ""+temp)switch (""+temp) {
                case "users":
                    tab_users=temp;
                    break;
                case "messages":
                    messages=temp;
                    break;
                case "mutes":
                    mutes=temp;
                    break;
                default:
                    break;
            }
        });
        
    }
    private ArrayList<Table> GetAllTables() throws SQLException{
        ArrayList<Table> tables=new ArrayList<>();
        ResultSet rs = conn.getMetaData().getTables("Chatroom", null, "%", null);
        while (rs.next()) {
          if (rs.getString(4)!=null && rs.getString(4).equalsIgnoreCase("TABLE")) {
                tables.add(new Table(rs.getString(3)));
            }
        }
        return tables;
    }
    private void GetAllColumns(Table table) throws SQLException{
        ResultSet rs = conn.createStatement().executeQuery("select * from "+table.name);
        ResultSetMetaData rsmd = rs.getMetaData();
        for(int i=1;i<=rsmd.getColumnCount();i++) table.addColumn(rsmd.getColumnName(i), rsmd.getColumnTypeName(i));
    }
    /**
     * <p> Funkcja sluzy do podpinania tekstu do panelu administratora.</p>
     * <p> Stosowana jest w klasach: ServerStart, ClientHandler, ktore nie maja
     * dostepu do prywatnych elementow klasy ChatroomServer.</p>
     * @param text tekst do wyswietlenia na panelu administratora
     */
    public void ServerTextAppend(String text){
        ServerText.setText(ServerText.getText()+text);
        ServerText.setCaretPosition(ServerText.getDocument().getLength());
    }

    /**
     * Funkcja odpowiedzialna jest za aktualizacje czatow wszystkich aktywnych klientow 
     * <p>Najpierw formuluje dla kazdego klienta zapytanie do bazy, ktore zwraca ostatnia zapisana wiadomosc od niewyciszonego uzytkownika. </p>
     * <p>Potem z zestawu wynikowego komponuje wiadomość do klienta i wysyła.</p>
     * @throws SQLException jezeli zapytanie jest bledne lub nie ma polaczenia z baza danych
     */
    public void updateChat() throws SQLException{
        
        for(User temp:users){
            ResultSet rs=SelectFromChat(new String[]{messages.Get(0)+" IN (SELECT MAX("+messages.Get(0)+") FROM "+messages+")"},temp.name);
            
            while(rs.next()){
                temp.OS.println(String.join(DELIMITER,"Chat",rs.getTimestamp(messages.Get(2)).toString(),rs.getString(messages.Get(1)),"  "+rs.getString(messages.Get(3))));
                temp.OS.flush();
            }
        }
    }

    /**
     * Funkcja komponuje kwerende aktualizacji tabeli na podstawie zmiennych 'table' i 'values', a potem nanosi zmiany
     * <p> Trzeba pamietac o tym, ze, wprowadzajac zmienne typu tekstowego koniecznym jest ujecie tekstu w apostofy</p>
     * @param table - nazwa tabeli, do ktorej wstawiamy wartosci
     * @param values - wartosci, ktore chcemy wstawic
     */
    public void Insert(String table, String... values){
        String sql="INSERT INTO "+table+" VALUES("+String.join(", ",values)+");";
        updateDatabase(sql);
    }

    /**
     * Funkcja komponuje kwerende usuwania wartosci z tabeli na podstawie zmiennych 'table' i 'conditions', a potem nanosi zmiany
     * <p> Trzeba pamietac o tym, ze, porownujac zmienne typu tekstowego koniecznym jest ujecie tekstu w apostofy</p>
     * @param table nazwa tabeli, z ktorej usuwany rekordy
     * @param conditions warunki, na podstawie ktorych wybieramy rekordy do usuniecia
     */
    public void Delete(String table, String... conditions){
        String sql="DELETE FROM "+table+" WHERE ";
        sql+=String.join(" AND ",conditions);
        updateDatabase(sql);
    }

    /**
     * Funkcja komponuje kwerende aktualizacji rekordow w tabeli na podstawie zmiennych 'table' , 'conditions' i 'values', a potem nanosi zmiany
     * <p> Trzeba pamietac o tym, ze, wprowadzajac lub porownujac zmienne typu tekstowego koniecznym jest ujecie tekstu w apostofy</p>
     * <p> Format pojedynczego stringa z listy 'values' - 'nazwa-kolumny = wartosc'</p>
     * @param table tabela do aktualizacji
     * @param conditions warunki, na podstawie ktorych wybieramy rekordy do aktualizacji
     * @param values 'nazwy kolumn do aktualizacji oraz wartosc do wstawienia'
     */
    public void Update(String table, String[] conditions, String... values){
        String sql="UPDATE "+table+" SET " + String.join(", ", values) + " WHERE "+String.join(" AND ",conditions)+";";
        updateDatabase(sql);
    }

    /**
     * Funkcja komponuje kwerende wyboru rekordow z tabeli na podstawie zmiennych 'table' , 'conditions' i 'columns'.
     * <p> Trzeba pamietac o tym, ze, porownujac zmienne typu tekstowego koniecznym jest ujecie tekstu w apostofy</p>
     * @param table tabela do aktualizacji
     * @param conditions warunki, na podstawie ktorych wybieramy rekordy do aktualizacji
     * @param columns 'nazwy kolumn do pobrania'
     * @return zestaw wynikowy zgodny z podanymi kryteriami
     */
    public ResultSet Select(String table, String[] conditions, String... columns){
        String sql="SELECT "+String.join(", ",columns)+" FROM "+table;
        if(conditions.length>0) sql+= " WHERE "+String.join(" AND ",conditions);
        sql+=";";
        System.out.println(sql);
        return queryDatabase(sql);
    }

    /**
     * Funkcja jest specjalnym przypadkiem funkcji Select(table, conditions, columns).
     * <p> Ma za zadanie wybrać tylko te rekordy z tabeli 'messages', gdzie użytkownik nie był wyciszony przez odbiorcę
     * @param conditions standardowe warunki podawane do funkcji Select
     * @param user nazwa odbiorcy wiadomości
     * @return zestaw wynikowy zgodny z podanymi kryteriami
     */
    public ResultSet SelectFromChat(String[] conditions, String user){
        String[] newConditions=new String[conditions.length+1];
        for(int i=0;i<conditions.length;i++) newConditions[i]=conditions[i];
        newConditions[conditions.length]=messages.Get(1)+" NOT IN (SELECT "+mutes.Get(2)+" FROM "+mutes+" WHERE "+mutes.Get(1)+" = '"+user+"')";
        return Select(""+messages,newConditions,"*");
    }

    /**
     * Test - czy rekord o podanych cechach istnieje w tabeli
     * <p> Trzeba pamietac o tym, ze, porownujac zmienne typu tekstowego koniecznym jest ujecie tekstu w apostofy</p>
     * @param table sprawdzana tabela
     * @param conditions kryteria testu
     * @return true jezeli dany rekord istnieje w tabeli
     */
    public Boolean CheckIn(String table, String[] conditions){
        try{
        return Select(table, conditions, "*").next();
        } catch (SQLException ex){
            ServerTextAppend("Blad podczas sprawdzania bazy danych");
            return null;
        }
    }
    private void updateDatabase(String sql){
        int rs;
        try{
            System.out.println(sql);
        statement=conn.createStatement();
        rs=statement.executeUpdate(sql);
        }catch (SQLException ex){
            ServerTextAppend("Blad w trakcie aktualizacji tabeli.");
        }
    }
    private ResultSet queryDatabase(String sql){
        try{
        statement=conn.createStatement();
        ResultSet rs=statement.executeQuery(sql);
        return rs;
        }catch (SQLException ex){
            ServerTextAppend("Blad podczas wybierania wartosci z bazy.");
        }
        return null;
    }
    
    /**
     * Funkcja służy do przekazywania odnośnika do prywatnego elementu klasy ChatroomServer
     * @return odnośnik do panelu tekstowego ServerText
     */
    public javax.swing.JTextPane getServerText(){
        return ServerText;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClientList;
    private javax.swing.JButton Launch;
    private javax.swing.JTextPane ServerText;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
