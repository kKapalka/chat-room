/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatroom.server;

import java.awt.Toolkit;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.regex.Pattern;

/**
 * 
 * @author kkapa
 */
public class ChatroomServer extends javax.swing.JFrame {
    //database variables
    /**
     * Zmienna przechowująca zapytania do bazy danych
     */
    Statement statement;
    /**
     * Zmienna przechowująca odnośnik do połączenia z bazą danych
     */
    Connection conn;
    /**
     * URL do bazy danych przechowującej informacje o czacie
     */
    String url = "jdbc:postgresql://localhost:5432/chatroom-db";
    /**
     * Stała przechowująca znak stopu między kolejnymi fragmentami przesyłanej informacji
     */
    static final String DELIMITER=";end;";
    /**
     * Zmienna przechowująca dane właściciela bazy danych, w celu pomyślnego zalogowania się do niej
     */
    static final String LOGIN="postgres",PASS="poszlaoladoprzedszkola";
    /**
     * Zmienna przechowująca listę strumieni wyjścia do klientów
     */
    ArrayList<PrintWriter> clientOutputStreams;
    /**
     * Zmienna przechowująca listę klientów
     */
    ArrayList<String> users;
    /**
     * Klasa służąca wyłącznie do przesyłania e-maili
     */
    static MailSender sender=new MailSender();
    
    static final String MES_TAB="Messages",MES_ID_COL="message_id",MES_COL="message",TIME_COL="timestamp_sent",SEND_COL="user";
       
    /**
     * <p>Funkcja tworzy nowy formularz ChatroomServer, i wyśrodkowuje go na ekranie</p>
     * <p>Łączy się automatycznie z bazą danych i uruchamia wątek ServerStart zbierający
     * połączenia od użytkowników, lub informuje administratora o błędzie połączenia z bazą.
     * Jeśli połączenie się uda, guzik łączenia ręcznego się zdezaktywuje.</p>
     */
    public ChatroomServer() {
        initComponents();
        setLocation((Toolkit.getDefaultToolkit().getScreenSize().width)/2 - getWidth()/2, (Toolkit.getDefaultToolkit().getScreenSize().height)/2 - getHeight()/2);
        try{
        DbConnect();
        Launch.setEnabled(false);
        }catch (SQLException ex){
            ServerText.setText("Nie połączono z bazą.\nPołącz manualnie.");
        }
            Thread starter = new Thread(new ServerStart(this));
            starter.start();
            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Launch = new javax.swing.JButton();
        ClientList = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ServerText = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(385, 505));

        Launch.setText("Uruchom ręcznie");
        Launch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LaunchActionPerformed(evt);
            }
        });

        ClientList.setText("Lista klientów");

        ServerText.setEditable(false);
        ServerText.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        ServerText.setText("...Serwer czeka na uruchomienie");
        jScrollPane1.setViewportView(ServerText);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Launch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                .addComponent(ClientList)
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClientList)
                    .addComponent(Launch))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * <p>Służy do ręcznego połączenia z bazą danych oraz uruchomienia serwera,
     * jeżeli automatyczne połączenie się nie uda - mechanizm fail-safe.</p>
     * <p>Jeżeli połączenie się uda, guzik się zdezaktywuje. Po połączeniu z bazą 
     * uruchamiany jest wątek SerwerStart, zbierający połączenia od użytkowników.</p>
     * @param evt - nasłuchuje naciśnięcia guzika "Połącz manualnie"
     */
    private void LaunchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LaunchActionPerformed
        try{
        DbConnect();
        Launch.setEnabled(false);
        }catch (SQLException ex){
            ServerText.setText("Nie połączono z bazą.\nSpróbuj ponownie później");
        }

            Thread starter = new Thread(new ServerStart(this));
            starter.start();

    }//GEN-LAST:event_LaunchActionPerformed

    /**
     * @param args Nieużywany
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatroomServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ChatroomServer().setVisible(true);
        });
    }

    /**
     * <p>Funkcja służy do łączenia z bazą danych.</p><p>
     * Wykorzystuje zmienne zadeklarowane wewnątrz programu: <b>URL, login, hasło</b>
     * aby wykonać połączenie. Gdy to się uda, administrator jest o tym informowany.</p>
     * <p>Funkcja stosowana jest w dwóch miejscach: w konstruktorze (automatyczne
     * połączenie) oraz wewnątrz funkcji LaunchActionPerformed (manualne połączenie)</p>
     * @throws SQLException jeżeli z jakiegokolwiek powodu połączenie się nie uda
     */
    
    private void DbConnect() throws SQLException{
        conn = DriverManager.getConnection(url,LOGIN,PASS);
        ServerText.setText("Połączono z bazą:\n"+url+"\n");
    }
    /**
     * <p> Funkcja służy do podpinania tekstu do panelu administratora.<p>
     * <p> Stosowana jest w klasach: ServerStart, ClientHandler, które nie mają
     * dostępu do prywatnych elementów klasy ChatroomServer.</p>
     * @param text - tekst do wyświetlenia na panelu administratora
     */
    public void ServerTextAppend(String text){
        ServerText.setText(ServerText.getText()+text);
        ServerText.setCaretPosition(ServerText.getDocument().getLength());
    }
    public void updateChat() throws SQLException{
        for(PrintWriter temp:clientOutputStreams){
            ResultSet rs=newquery("Fetch",new String[]{"*"}, MES_TAB,new String[]{TIME_COL+"..in.."+"(SELECT MAX(\""+TIME_COL+"\") FROM \""+MES_TAB+"\")"});
            
            while(rs.next()){
                temp.println(String.join(DELIMITER,"Chat",rs.getString(SEND_COL),rs.getTimestamp(TIME_COL).toString(),rs.getString(MES_COL)));
                temp.flush();
            }
            
        }
    }
    
    
    /**
     * 
     * @param type przyjmuje "Insert" - wstaw, "Delete"-usuń, "Update"-zaktualizuj
     * @param values - tabela wartości do wstawienia lub zmienienia
     * @param table - tablica bazy danych do zmodyfikowania
     * @param conditions - warunki, zapisane formatem "Kolumna..equal..Wartość"
     * @return ilość zmodyfikowanych wierszy
     * @throws SQLException jeżeli wystąpi błąd z połączeniem z bazą danych
     */
    public int newupdate(String type, String[] values, String table, String[] conditions) throws SQLException{
        statement=conn.createStatement();
        String sql="";
        switch(type){
            case "Insert":
                sql+="INSERT INTO \""+table+"\" VALUES (";
                for(String temp:values){
                    if(!temp.equals(values[0])) sql+=", ";
                    try{
                        sql+=""+Integer.parseInt(temp);
                    }catch (NumberFormatException ex){
                        if ("true".equals(temp) ||"false".equals(temp)) sql+=""+temp;
                        else sql+="'"+temp+"'";
                    }
                }
                sql+=");";
                int rs=statement.executeUpdate(sql);
                return rs;
                
            case "Delete":
                sql+="DELETE FROM \""+table+"\" WHERE ";
                break;
            case "Update":
                sql+="UPDATE \""+table+"\" SET ";
                for(String temp:values){
                    if(!temp.equals(values[0])) sql+=", ";
                    sql+=temp;
                }
                sql+=" WHERE ";
                break;
        }
        for(String temp:conditions){
            if(!temp.equals(conditions[0])) sql+=" AND ";  
                String[] data=temp.split(Pattern.quote(".."));
                sql+="\""+data[0]+"\"";
                switch(data[1]){
                    case "equal":
                        sql+=" LIKE ";
                        break;
                }
                sql+="'"+data[2]+"'";
            }
            sql+=";";
            int rs=statement.executeUpdate(sql);
            return rs;
    }
    public ResultSet newquery(String type, String[] values, String table, String[] conditions) throws SQLException{
        String sql="";
        switch(type){
            case "Check":
                sql+="SELECT *";
                break;
            case "Fetch":
                sql+="SELECT ";
                for(String temp:values){
                    if(!temp.equals(values[0])) sql+=", ";
                    sql+=temp;
                }
                break;
        }
        sql+=" FROM \""+table+"\"";
        if(conditions.length>0){
            sql+=" WHERE ";
            for(String temp:conditions){
                if(!temp.equals(conditions[0])) sql+=" AND ";  
                String[] data=temp.split(Pattern.quote(".."));
                sql+="\""+data[0]+"\"";
                switch(data[1]){
                    case "equal":
                        sql+=" LIKE ";
                        sql+="'"+data[2]+"'";
                        break;
                    case "bool":
                        sql+="="+data[2];
                        break;
                    case "in":
                        sql+=" IN ";
                        sql+=data[2];
                        break;
                }
                
            }
        }
        sql+=";";
        System.out.println(sql);
        statement=conn.createStatement();
        ResultSet rs=statement.executeQuery(sql);
        return rs;
    }
    public javax.swing.JTextPane getServerText(){
        return ServerText;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClientList;
    private javax.swing.JButton Launch;
    private javax.swing.JTextPane ServerText;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
