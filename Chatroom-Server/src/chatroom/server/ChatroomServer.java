/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatroom.server;

import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
/**
 *
 * @author kkapa
 */
public class ChatroomServer extends javax.swing.JFrame {
    ArrayList clientOutputStreams;
    Statement statement;
    Connection conn;
    String sql;
    String url = "jdbc:postgresql://localhost:5432/chatroom-db";
    ServerSocket serversocket;
    Socket clientsocket;
    
    static final String DELIMITER=";end;",LOGIN="postgres",PASS="poszlaoladoprzedszkola";
    
     
    
    /**
     * Creates new form CServerFrame
     */
    public ChatroomServer() {
        initComponents();
        setLocation((Toolkit.getDefaultToolkit().getScreenSize().width)/2 - getWidth()/2, (Toolkit.getDefaultToolkit().getScreenSize().height)/2 - getHeight()/2);
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ServerText = new javax.swing.JTextArea();
        Launch = new javax.swing.JButton();
        ClientList = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(385, 505));
        setPreferredSize(new java.awt.Dimension(385, 505));

        ServerText.setEditable(false);
        ServerText.setColumns(20);
        ServerText.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        ServerText.setLineWrap(true);
        ServerText.setRows(5);
        ServerText.setText("Serwer czeka na uruchomienie...");
        ServerText.setToolTipText("");
        ServerText.setPreferredSize(new java.awt.Dimension(350, 400));
        ServerText.setSelectedTextColor(new java.awt.Color(120, 120, 120));
        jScrollPane1.setViewportView(ServerText);
        ServerText.getAccessibleContext().setAccessibleParent(this);

        Launch.setText("Uruchom");
        Launch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LaunchActionPerformed(evt);
            }
        });

        ClientList.setText("Lista klientów");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Launch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ClientList)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClientList)
                    .addComponent(Launch))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LaunchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LaunchActionPerformed
        if(!DbConnect()) return;
        Thread starter = new Thread(new ServerStart(this));
        starter.start();
        
        ServerText.append("Serwer sprawny...\n");
    }//GEN-LAST:event_LaunchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatroomServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ChatroomServer().setVisible(true);
        });
    }

    public class ServerStart implements Runnable 
    {
        ChatroomServer parent;
        ServerStart(ChatroomServer par){
            parent=par;
        }
        @Override
        public void run() 
        {
            //clientOutputStreams = new ArrayList();
            //users = new ArrayList();  

            try 
            {
                
                serversocket = new ServerSocket(2222);
                while (true) 
                {
				clientsocket=serversocket.accept();
				PrintWriter out =
                                new PrintWriter(clientsocket.getOutputStream(), true);
                                BufferedReader in = new BufferedReader(new InputStreamReader(clientsocket.getInputStream()));
                                Thread listener = new Thread(new ClientHandler(clientsocket, out,parent));
				listener.start();
                }
            }
            catch (IOException ex)
            {
                ServerText.append("Error making a connection. \n");
            }
        }
    }
    
    public Boolean DbConnect(){
        try{
            System.out.println(Collections.list(DriverManager.getDrivers()));
        conn = DriverManager.getConnection(url,LOGIN,PASS);
        ServerText.setText("Połączono z bazą: "+url+"\n");
        return true;
        }catch (SQLException sqlex){
            ServerText.setText("Nie Połączono");
            return false;
        }
    }
    
    public void ServerTextAppend(String text){
        ServerText.append(text);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClientList;
    private javax.swing.JButton Launch;
    private javax.swing.JTextArea ServerText;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
